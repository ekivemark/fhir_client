"""
Django settings for fhir_client project.

Generated by 'django-admin startproject' using Django 1.9.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

from configparser import RawConfigParser
# from ldap3 import (Server, Connection,
#                    ALL, SUBTREE,
#                    LDAPSocketOpenError,
#                    LDAPOperationResult,)

PARSE_INI = RawConfigParser()
# http://stackoverflow.com/questions/4909958/django-local-settings/14545196#14545196


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import json
# import sys
from platform import python_version
from .utils import (str2bool,
                    str2int,
                    CurrentUserMiddleware,
                    Server_Ip,
                    Server_Name)

BASE_DIR = os.path.dirname(os.path.dirname(__file__))

APPLICATION_ROOT = BASE_DIR

# Config file should be installed in parent directory
# format is:
# [global]
# domain = dev.bbonfhir.com
# debug = True
# template_debug = True
# debug_settings = True
# email_host = box905.bluehost.com
#

CONFIG_FILE = '_start/local_ini/local.ini'
# Read the config file
PARSE_INI.read_file(open(os.path.join(APPLICATION_ROOT, CONFIG_FILE)))
# Then use PARSE_INI.get(SECTION, VARIABLE) to read in value
# Value is in string format
# Use util functions to convert strings to boolean or Integer


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.7/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
# The real value is set in the local_settings.py
# local_settings.py is excluded from the git repository
# Place other important keys, passwords etc. in local_settings.py
# which is called at the end of settings.py

# I recommend setting a default/false value in settings.py
# and then overwriting in local_settings. This keeps the app
# functional if anyone clones the repository
# You can generate a new SECRET_KEY using tools such as
# http://www.miniwebtool.com/django-secret-key-generator/
#

SECRET_KEY = 'FAKE_VALUE_REAL_VALUE_SET_FROM_..LOCAL.INI'
SECRET_KEY = PARSE_INI.get('global', 'secret_key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = str2bool(PARSE_INI.get('global', 'debug'))

#TEMPLATE_DEBUG = str2bool(PARSE_INI.get('global', 'template_debug'))

DEBUG_SETTINGS = str2bool(PARSE_INI.get('global', 'debug_settings'))

# Get the Server Domain Name. eg. dev.bbonfhir.com
# ie the server name to address this app
DOMAIN = PARSE_INI.get('global', 'domain')

if DEBUG:
    ALLOWED_HOSTS = []

else:
    ALLOWED_HOSTS = PARSE_INI.get('global', 'allowed_hosts').split(',')
    ALLOWED_HOSTS.append(DOMAIN)
    ALLOWED_HOSTS.append(Server_Ip())

    # ALLOWED_HOSTS = ['.bbonfhir.com',
    #                  'localhost',
    #                  '127.0.0.1',
    #                  DOMAIN]
ADMINS = (
    ('Mark Scrimshire', 'mark@ekivemark.com'),
)

MANAGERS = ADMINS
ALLOWED_HOSTS = []

APPLICATION_TITLE = PARSE_INI.get('global', 'application_title')
if APPLICATION_TITLE == "":
    APPLICATION_TITLE = "FHIR Testing Client"


# Application definition

BASE_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    #'social.apps.django_app.default',
    'bootstrap3',
    'bootstrapform',
    'oauth2_provider',
    'corsheaders',
]

CUSTOM_APPS = [
    '_start',
    'getfhir',
]

INSTALLED_APPS = BASE_APPS + THIRD_PARTY_APPS + CUSTOM_APPS

AUTHENTICATION_BACKENDS = (
    # 'social.backends.open_id.OpenIdAuth',
    # 'social.backends.google.GoogleOpenId',
    # 'social.backends.google.GoogleOAuth2',
    # 'social.backends.google.GoogleOAuth',
    # 'social.backends.twitter.TwitterOAuth',
    # 'social.backends.yahoo.YahooOpenId',
    'django.contrib.auth.backends.ModelBackend',
)

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    #'social.apps.django_app.middleware.SocialAuthExceptionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '_start.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # 'social.apps.django_app.context_processors.backends',
                # 'social.apps.django_app.context_processors.login_redirect',
                'django_settings_export.settings_export',
            ],
            # 'loaders': [
            #     'django.template.loaders.filesystem.Loader',
            #     'django.template.loaders.app_directories.Loader',
            # ],
        },
    },
]

WSGI_APPLICATION = '_start.apache2.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.7/howto/static-files/

# URL prefix for admin static files -- CSS, JavaScript and images.
# Make sure to use a trailing slash.
# Examples: "http://foo.com/static/admin/", "/static/admin/".
ADMIN_MEDIA_PREFIX = '/static/admin/'

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(BASE_DIR, 'sitestatic'),
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    #    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

STATIC_ROOT = '/var/www/html/'+DOMAIN+'/'

STATIC_URL = '/static/'

# OAUTH_TEST_INFO = {'APP_KEY':"ApplicationKey",
#                    'APP_SECRET': "ApplicationSecret",
#                    'URL': "https://api.twitter.com/oauth/request_token"
#                    }


####
#### PYTHON-SOCIAL-AUTH SETTINGS
####
# SOCIAL_AUTH_AUTHENTICATION_BACKENDS = (
#     'social.backends.open_id.OpenIdAuth',
#     'social.backends.google.GoogleOpenId',
#     'social.backends.google.GoogleOAuth2',
#     'social.backends.google.GoogleOAuth',
#     'social.backends.twitter.TwitterOAuth',
#     'social.backends.yahoo.YahooOpenId',
# )
#
# #SOCIAL_AUTH_USER_MODEL = 'User'
# SOCIAL_AUTH_URL_NAMESPACE = 'social'
# SOCIAL_AUTH_ADMIN_USER_SEARCH_FIELDS = ['username', 'first_name', 'email']


OAUTH_TEST_INFO = {'CLIENT_ID': 'EJi3gHNyWZpyynuK77A2RQ5uJndruIsze0eivUMw',
                   'CLIENT_SECRET': "mVp4oO4ph2lnlpTcxhfgu4pBP6kivQLOo8jHCgZjJmxZbxyrT2AKKHP7yWGlrDDeEyRQTkOPOvcaWYBnKrKetmoojYNBENUa4szCzhItAzTE4JTa0LyucsQwXvoM7YSk",
                   # 'CLIENT_ID': "HDHZqA7dEnAif9PRq1atwWXMtkZNXUtZodb93iH0",
                   # 'CLIENT_SECRET': "H4BIyuyGTBTVG9CvVFtcMhYYIS4xQScbsYtaREEcYHN1VsIf4MeWjxYC56dqc970ACDnf5A1Kge6rVz5yecaTJjlORv502XLIcKlO5JwX2bAsw5bSXFdsjtsXVbX7ScE",
                   'USER': "healthcamp_mark",
                   'CLIENT_TYPE': "confidential",
                   'GRANT_TYPE': "authorization_code",
                   'NAME': "First_Test",
                   'REDIRECT_URI': "http://localhost:8080/o/endpoint/",
                   #'URL': "https://api.bbonfhir.com/o/token",
                   # 'AUTH_URL': "https://api.bbonfhir.com/o/authorize",
                   # 'TOKEN_URL': "https://api.bbonfhir.com/o/token",
                   'AUTH_URL': "http://localhost:8000/o/authorize/",
                   'TOKEN_URL': "http://localhost:8000/o/token/",
                   #'BASE': "https://api.bbonfhir.com",
                   'BASE': "http://localhost:8000",
                   }

OAUTH_VERSION = 2.0

CORS_ORIGIN_ALLOW_ALL = True

SETTINGS_EXPORT = [
    'DEBUG',
    'APPLICATION_TITLE',
    'DOMAIN',
]